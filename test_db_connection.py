#!/usr/bin/env python3
"""
Script de teste para verificar conex√£o com PostgreSQL

Execute este script para testar se o banco de dados est√° acess√≠vel.
"""

import os
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def test_db_connection():
    """Testa conex√£o com PostgreSQL"""
    print("=== Testando Conex√£o com PostgreSQL ===\n")
    
    # Configura√ß√£o do banco
    db_config = {
        'host': os.getenv('DB_HOST', 'localhost'),
        'database': os.getenv('DB_NAME', 'sonar'),
        'user': os.getenv('DB_USER', 'sonar'),
        'password': os.getenv('DB_PASSWORD', 'sonar'),
        'port': int(os.getenv('DB_PORT', 5432))
    }
    
    print("üìã Configura√ß√£o:")
    print(f"   Host: {db_config['host']}")
    print(f"   Port: {db_config['port']}")
    print(f"   Database: {db_config['database']}")
    print(f"   User: {db_config['user']}")
    print(f"   Password: {'*' * len(db_config['password'])}")
    print()
    
    # Tenta importar psycopg2
    try:
        import psycopg2
        print("‚úÖ M√≥dulo psycopg2 importado com sucesso")
    except ImportError:
        print("‚ùå ERRO: M√≥dulo psycopg2 n√£o encontrado")
        print("   Instale com: pip install psycopg2-binary")
        return False
    
    # Tenta conectar
    try:
        print("\nüîå Tentando conectar...")
        connection = psycopg2.connect(**db_config)
        connection.autocommit = True
        
        print("‚úÖ Conex√£o estabelecida com sucesso!")
        
        # Testa query
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"\nüìä Vers√£o do PostgreSQL:")
            print(f"   {version[0][:80]}...")
            
            # Lista tabelas existentes
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            
            if tables:
                print(f"\nüìã Tabelas existentes ({len(tables)}):")
                for table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table[0]};")
                    count = cursor.fetchone()[0]
                    print(f"   - {table[0]}: {count} registros")
            else:
                print("\n‚ö†Ô∏è  Nenhuma tabela encontrada (banco vazio)")
                print("   As tabelas ser√£o criadas ao executar o script principal")
        
        connection.close()
        print("\n‚úÖ Teste conclu√≠do com sucesso!")
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå ERRO de conex√£o: {e}")
        print("\nüîç Poss√≠veis causas:")
        print("   1. PostgreSQL n√£o est√° rodando")
        print("      Solu√ß√£o: docker-compose up -d")
        print("   2. Porta 5432 n√£o est√° exposta")
        print("      Solu√ß√£o: Verifique docker-compose.yml")
        print("   3. Credenciais incorretas no .env")
        print("      Solu√ß√£o: Verifique DB_USER, DB_PASSWORD, DB_NAME")
        print("   4. Container ainda est√° inicializando")
        print("      Solu√ß√£o: Aguarde alguns segundos e tente novamente")
        return False
        
    except Exception as e:
        print(f"‚ùå ERRO inesperado: {e}")
        return False

if __name__ == "__main__":
    success = test_db_connection()
    sys.exit(0 if success else 1)
